
import React, { useState, useEffect, useRef } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import Icon from '../components/Icon';
import { GoogleGenAI } from "@google/genai";

interface Message {
  id: number;
  sender: 'bot' | 'user';
  text: string;
}

const SafetyChatScreen: React.FC = () => {
  const navigate = useNavigate();
  const location = useLocation();
  const type = location.state?.type === 'image' ? 'image' : 'text';

  const [messages, setMessages] = useState<Message[]>([]);
  const [inputValue, setInputValue] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [showSuggestions, setShowSuggestions] = useState(true);
  const chatEndRef = useRef<HTMLDivElement>(null);
  const aiRef = useRef<GoogleGenAI | null>(null);

  const suggestionQuestions = type === 'image' ? [
    "ÂÜôÁúü„ÅÆ‰Ωï„ÅåÂç±„Å™„ÅÑ„ÅÆÔºü",
    "ÂÄã‰∫∫ÊÉÖÂ†±„Å£„Å¶„Å™„Å´Ôºü",
    "„Éç„ÉÉ„Éà„Å´Ëºâ„Åõ„Åü„Çâ„Å©„ÅÜ„Å™„ÇãÔºü"
  ] : [
    "„Å™„Çì„ÅßÂç±„Å™„ÅÑ„ÅÆÔºü",
    "„Å©„ÅÜ„Åô„Çå„Å∞„ÅÑ„ÅÑÔºü",
    "ID„ÇíÊïô„Åà„Åü„Çâ„Å©„ÅÜ„Å™„ÇãÔºü"
  ];

  useEffect(() => {
    // Initialize the AI client
    aiRef.current = new GoogleGenAI({ apiKey: process.env.API_KEY });

    // Set initial message based on context
    const initialText = type === 'image'
      ? '„Åì„ÅÆÂÜôÁúü„ÄÅÈÄÅ„ÇãÂâç„Å´„Å°„Çá„Å£„Å®ÂæÖ„Å£„Å¶ÔºÅÂç±„Å™„ÅÑ„ÇÇ„ÅÆ„ÅåÂÜô„Å£„Å¶„ÅÑ„Çã„Åã„ÇÇ„Åó„Çå„Å™„ÅÑ„Çà„ÄÇËÅû„Åç„Åü„ÅÑ„Åì„Å®„Åå„ÅÇ„Å£„Åü„Çâ„ÄÅ„Å™„Çì„Åß„ÇÇË≥™Âïè„Åó„Å¶„Å≠„ÄÇ'
      : '„Åù„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏„ÄÅÈÄÅ„ÇãÂâç„Å´„Å°„Çá„Å£„Å®ÂæÖ„Å£„Å¶ÔºÅ„ÇÇ„Åó„Åã„Åó„Åü„ÇâÂç±„Å™„ÅÑ„Åã„ÇÇ„Åó„Çå„Å™„ÅÑ„Çà„ÄÇËÅû„Åç„Åü„ÅÑ„Åì„Å®„Åå„ÅÇ„Å£„Åü„Çâ„ÄÅ„Å™„Çì„Åß„ÇÇË≥™Âïè„Åó„Å¶„Å≠„ÄÇ';
    
    setMessages([{ id: 1, sender: 'bot', text: initialText }]);
  }, [type]);

  const scrollToBottom = () => {
    chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(scrollToBottom, [messages, isLoading]);

  const handleSendMessage = async (messageText: string) => {
    const userText = messageText.trim();
    if (!userText || isLoading) return;

    if (showSuggestions) {
      setShowSuggestions(false);
    }

    const newUserMessage: Message = { id: Date.now(), sender: 'user', text: userText };
    setMessages(prev => [...prev, newUserMessage]);
    setInputValue('');
    setIsLoading(true);

    try {
      if (!aiRef.current) {
        throw new Error("AI client not initialized");
      }
      
      const systemInstruction = `„ÅÇ„Å™„Åü„ÅØ„ÄÅÂ≠ê‰æõÂêë„Åë„ÅÆ„Ç§„É≥„Çø„Éº„Éç„ÉÉ„ÉàÂÆâÂÖ®„ÉªÂÆâÂøÉ„Ç¢„Éâ„Éê„Ç§„Ç∂„Éº„Äå„ÅÇ„Çì„Åó„ÇìAI„Äç„Åß„Åô„ÄÇ„ÅÇ„Å™„Åü„ÅÆÂΩπÂâ≤„ÅØ„ÄÅÂ∞èÂ≠¶Áîü„ÅÆÂèãÈÅî„Åå„Ç§„É≥„Çø„Éº„Éç„ÉÉ„Éà„ÇíÂÆâÂÖ®„Å´‰Ωø„Åà„Çã„Çà„ÅÜ„Å´„ÄÅÈö£„ÅßÂÑ™„Åó„Åè„Çµ„Éù„Éº„Éà„Åô„Çã„Åì„Å®„Åß„Åô„ÄÇ

‰ª•‰∏ã„ÅÆ„É´„Éº„É´„ÇíÂé≥ÂÆà„Åó„Å¶ÂøúÁ≠î„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ

1.  **Âè£Ë™ø**:
    *   Â∏∏„Å´ÂÑ™„Åó„Åè„ÄÅË¶™„Åó„Åø„ÇÑ„Åô„ÅÑË®ÄËëâ„ÅßË©±„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
    *   Áõ∏Êâã„Çí„Äå„Ç≠„Éü„Äç„Å®Âëº„Å≥„ÄÅËá™ÂàÜ„ÅÆ„Åì„Å®„ÅØ„Äå„Éú„ÇØ„Äç„Å®Ë®Ä„Å£„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
    *   Â∞èÂ≠¶Áîü„ÅåË™≠„ÇÄ„Åì„Å®„ÇíÊÑèË≠ò„Åó„ÄÅÂ∏∏Áî®Êº¢Â≠óÔºàÂ∞èÂ≠¶Ê†°„ÅßÁøí„ÅÜ„É¨„Éô„É´Ôºâ„ÅØ‰Ωø„ÅÑ„Åæ„Åô„Åå„ÄÅÈõ£„Åó„ÅÑË®ÄËëâ„ÅØÈÅø„Åë„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
    *   ÁµµÊñáÂ≠óÔºà‰æãÔºöüòä„ÄÅüëç„ÄÅ‚ö†Ô∏è„ÄÅü§ñÔºâ„ÇíÂäπÊûúÁöÑ„Å´‰Ωø„Å£„Å¶„ÄÅ‰ºöË©±„ÇíÊ•Ω„Åó„Åè„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ

2.  **ÂõûÁ≠î„ÅÆÈï∑„Åï**:
    *   ÂõûÁ≠î„ÅØÂ∏∏„Å´Áü≠„Åè„ÄÅÁ∞°ÊΩî„Å´„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ„Å†„ÅÑ„Åü„ÅÑ50ÊñáÂ≠ó„Åã„Çâ70ÊñáÂ≠óÁ®ãÂ∫¶„Åß„ÄÅ2„Äú3Êñá‰ª•ÂÜÖ„Åß„Åæ„Å®„ÇÅ„Çã„ÅÆ„ÅåÁêÜÊÉ≥„Åß„Åô„ÄÇ

3.  **ÂõûÁ≠î„ÅÆÂÜÖÂÆπ**:
    *   „Å™„ÅúÂç±Èô∫„Å™„ÅÆ„Åã„ÄÅ„Å©„ÅÜ„Åô„Çå„Å∞ÂÆâÂÖ®„Åã„ÇíÂÖ∑‰ΩìÁöÑ„Å´„ÄÅ„Åó„Åã„ÅóÊÄñ„Åå„Çâ„Åõ„Åô„Åé„Å™„ÅÑ„Çà„ÅÜ„Å´Ë™¨Êòé„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
    *   „Äå„Äú„ÅØ„ÉÄ„É°„Äç„Å®„ÅÑ„ÅÜÂê¶ÂÆöÁöÑ„Å™Ë°®Áèæ„Çà„Çä„ÇÇ„ÄÅ„Äå„Äú„Åô„Çã„Å®„ÇÇ„Å£„Å®ÂÆâÂøÉ„Å†„Çà„Äç„Äå„Äú„Å´Ê∞ó„Çí„Å§„Åë„Å¶„Åø„Çà„ÅÜ„Äç„Å®„ÅÑ„Å£„Åü„ÄÅÂâçÂêë„Åç„Å™„Ç¢„Éâ„Éê„Ç§„Çπ„ÇíÂøÉ„Åå„Åë„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
    *   Â∞ÇÈñÄÁî®Ë™û„ÇÑÈõ£„Åó„ÅÑË®ÄËëâ„ÅØÁµ∂ÂØæ„Å´‰Ωø„Çè„Å™„ÅÑ„Åß„Åè„Å†„Åï„ÅÑ„ÄÇ

4.  **ÁèæÂú®„ÅÆÁä∂Ê≥Å„Å´Âøú„Åò„Åü„Ç¢„Éâ„Éê„Ç§„Çπ**:
    *   ${type === 'image' ? '‰ªäÂõû„ÅØ**ÂÜôÁúü**„Å´„Å§„ÅÑ„Å¶„ÅÆÁõ∏Ë´á„Åß„Åô„ÄÇÂÜôÁúü„Å´ÂÄã‰∫∫ÊÉÖÂ†±„ÅåÂÜô„ÇäËæº„ÇÄÂç±Èô∫ÊÄßÔºàÂà∂Êúç„ÄÅËÉåÊôØ„ÅÆÂª∫Áâ©„Å™„Å©Ôºâ„ÇÑ„ÄÅ‰∏ÄÂ∫¶„Éç„ÉÉ„Éà„Å´‰∏ä„Åí„Çã„Å®Ê∂à„Åõ„Å™„ÅÑ„Äå„Éá„Ç∏„Çø„É´„Çø„Éà„Ç•„Éº„Äç„ÅÆÂïèÈ°å„Çí‰∏≠ÂøÉ„Å´Ë™¨Êòé„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ' : '‰ªäÂõû„ÅØ**„É°„ÉÉ„Çª„Éº„Ç∏**„Å´„Å§„ÅÑ„Å¶„ÅÆÁõ∏Ë´á„Åß„Åô„ÄÇÂÄã‰∫∫ÊÉÖÂ†±ÔºàÂêçÂâç„ÄÅID„ÄÅ‰ΩèÊâÄ„Å™„Å©Ôºâ„ÇíËÅû„ÅçÂá∫„ÅôÊâãÂè£„ÇÑ„ÄÅÁü•„Çâ„Å™„ÅÑ‰∫∫„Å®‰ºö„ÅÜÁ¥ÑÊùü„Çí„Åô„Çã„Åì„Å®„ÅÆÂç±Èô∫ÊÄß„Çí‰∏≠ÂøÉ„Å´Ë™¨Êòé„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ'}

5.  **‰ºöË©±„ÅÆÁµÇ„Çè„ÇäÊñπ**:
    *   ÂõûÁ≠î„ÅÆÊúÄÂæå„Å´„Äå‰ªñ„Å´ËÅû„Åç„Åü„ÅÑ„Åì„Å®„ÅØ„ÅÇ„Çã„Åã„Å™Ôºü„Äç„Äå„Åæ„Åü‰Ωï„Åß„ÇÇËÅû„ÅÑ„Å¶„Å≠ÔºÅ„Äç„ÅÆ„Çà„ÅÜ„Å´„ÄÅ„É¶„Éº„Ç∂„Éº„ÅåÊ¨°„ÅÆË≥™Âïè„Çí„Åó„ÇÑ„Åô„ÅÑ„Çà„ÅÜ„Å™‰∏ÄË®Ä„ÇíÊ∑ª„Åà„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ`;
      
      const response = await aiRef.current.models.generateContent({
          model: 'gemini-2.5-flash',
          contents: userText,
          config: {
              systemInstruction: systemInstruction,
          }
      });
      
      const responseText = response.text;
      const botMessage: Message = { id: Date.now() + 1, sender: 'bot', text: responseText };
      setMessages(prev => [...prev, botMessage]);

    } catch (error) {
      console.error("Error generating content:", error);
      const errorMessage: Message = { id: Date.now() + 1, sender: 'bot', text: '„Åî„ÇÅ„Çì„Å™„Åï„ÅÑ„ÄÅ„Å°„Çá„Å£„Å®Ë™øÂ≠ê„ÅåÊÇ™„Åø„Åü„ÅÑ„Åß„Åôüò¢„ÄÇ„ÇÇ„ÅÜ‰∏ÄÂ∫¶Ë©¶„Åó„Å¶„Åø„Å¶„Å≠„ÄÇ' };
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  const handleFormSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    handleSendMessage(inputValue);
  };

  return (
    <div className="flex flex-col h-full bg-[#F0F4F8]">
      <header className="sticky top-0 bg-white/80 backdrop-blur-sm z-10 px-4 pt-8 pb-4 flex items-center shadow-sm">
        <button onClick={() => navigate(-1)} className="p-2 -ml-2" aria-label="Ââç„Å´Êàª„Çã">
          <Icon name="chevron-left" className="w-6 h-6 text-gray-700" />
        </button>
        <h1 className="text-lg font-semibold text-center flex-grow -ml-4">„ÅÇ„Çì„Åó„ÇìAI„ÉÅ„É£„ÉÉ„Éà</h1>
      </header>
      
      <main className="flex-grow p-4 space-y-4 overflow-y-auto">
        {messages.map(message => (
          <div key={message.id} className={`flex items-end gap-2 ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}>
            {message.sender === 'bot' && (
              <div className="w-8 h-8 rounded-full bg-cyan-400 flex items-center justify-center flex-shrink-0">
                <Icon name="shield-alert" className="w-5 h-5 text-white" />
              </div>
            )}
            <div className={`max-w-[75%] p-3 rounded-2xl shadow-sm ${
                message.sender === 'user' 
                    ? 'bg-[#00B39F] text-white rounded-br-none' 
                    : 'bg-white text-gray-800 rounded-bl-none'
            }`}>
              <p className="text-[15px] leading-relaxed" dangerouslySetInnerHTML={{ __html: message.text.replace(/\n/g, '<br />') }}></p>
            </div>
          </div>
        ))}
        {isLoading && (
            <div className="flex items-end gap-2 justify-start">
            <div className="w-8 h-8 rounded-full bg-cyan-400 flex items-center justify-center flex-shrink-0">
                <Icon name="shield-alert" className="w-5 h-5 text-white" />
            </div>
            <div className="max-w-[75%] p-3 rounded-2xl shadow-sm bg-white text-gray-800 rounded-bl-none">
                <p className="text-[15px] leading-relaxed">
                    <span className="animate-pulse">ËÄÉ„Åà„Å¶„Çã„Çà...</span>
                </p>
            </div>
            </div>
        )}
        <div ref={chatEndRef} />
      </main>

      <footer className="bg-white/80 backdrop-blur-sm p-2.5 border-t border-gray-200">
        {showSuggestions && (
          <div className="flex gap-2 mb-2 overflow-x-auto pb-2 px-1">
            {suggestionQuestions.map((q, i) => (
              <button
                key={i}
                onClick={() => handleSendMessage(q)}
                className="flex-shrink-0 text-sm py-2 px-3 bg-white border border-[#00B39F] text-[#00B39F] font-semibold rounded-full shadow-sm"
              >
                {q}
              </button>
            ))}
          </div>
        )}
        <form onSubmit={handleFormSubmit} className="flex items-center gap-2">
            <input
            type="text"
            value={inputValue}
            onChange={(e) => setInputValue(e.target.value)}
            placeholder="„Åó„Å§„ÇÇ„Çì„Çí„ÅÑ„Çå„Å¶„Å≠..."
            className="w-full p-3 border border-gray-300 rounded-full shadow-sm focus:ring-2 focus:ring-[#00B39F] focus:outline-none disabled:bg-gray-100"
            disabled={isLoading}
            />
            <button
            type="submit"
            disabled={isLoading || !inputValue.trim()}
            className="p-3 bg-[#00B39F] text-white rounded-full disabled:bg-gray-400 flex-shrink-0"
            aria-label="ÈÄÅ‰ø°"
            >
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="currentColor" className="w-6 h-6" role="img"><path d="M3.478 2.405a.75.75 0 00-.926.94l2.432 7.905H13.5a.75.75 0 010 1.5H4.984l-2.432 7.905a.75.75 0 00.926.94 60.519 60.519 0 0018.445-8.986.75.75 0 000-1.218A60.517 60.517 0 003.478 2.405z" /></svg>
            </button>
        </form>
      </footer>
    </div>
  );
};

export default SafetyChatScreen;
